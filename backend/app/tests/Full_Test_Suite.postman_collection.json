{
	"info": {
		"_postman_id": "b150e23a-9f37-4b14-9376-4a9142e807b1",
		"name": "Full_Test_Suite",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Create",
					"item": [
						{
							"name": "Add User 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test(\"Response test\", function() {\r",
											"    pm.response.to.be.withBody;\r",
											"    \r",
											"    postman.setEnvironmentVariable(\"user-id-1\", pm.response.text());\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"email-1\", _.random(1,1000000).toString() + \"@gmail.com\")\r",
											"pm.environment.set(\"username-1\", _.random(1,1000000).toString())"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{username-1}}\",\r\n    \"password\": \"testpword\",\r\n    \"email\": \"{{email-1}}\",\r\n    \"birthdate\": \"1991-01-01\",\r\n    \"gender\": \"Male\",\r\n    \"first_name\": \"testI\",\r\n    \"last_name\": \"testL\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{site}}:{{port}}/users",
									"host": [
										"{{site}}"
									],
									"port": "{{port}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add User 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test(\"Response test\", function() {\r",
											"    pm.response.to.be.withBody;\r",
											"    \r",
											"    postman.setEnvironmentVariable(\"user-id-2\", pm.response.text());\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"email-2\", _.random(1,1000000).toString() + \"@gmail.com\")\r",
											"pm.environment.set(\"username-2\", _.random(1,1000000).toString())"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{username-2}}\",\r\n    \"password\": \"testpword\",\r\n    \"email\": \"{{email-2}}\",\r\n    \"birthdate\": \"1991-01-01\",\r\n    \"gender\": \"Male\",\r\n    \"first_name\": \"testI\",\r\n    \"last_name\": \"testL\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{site}}:{{port}}/users",
									"host": [
										"{{site}}"
									],
									"port": "{{port}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Tests",
					"item": [
						{
							"name": "Update User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "first_name",
											"value": "John",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{site}}:{{port}}/users/{{user-id-1}}",
									"host": [
										"{{site}}"
									],
									"port": "{{port}}",
									"path": [
										"users",
										"{{user-id-1}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Tests",
					"item": [
						{
							"name": "Get User By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test(\"Response test\", function() {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"\r",
											"    // We should add a check that password is not included when the endpoint is changed to not send it back\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData._id).to.eql(pm.environment.get(\"user-id-1\"));\r",
											"    pm.expect(jsonData.username).to.eql(pm.environment.get(\"username-1\"));\r",
											"    pm.expect(jsonData.email).to.eql(pm.environment.get(\"email-1\"));\r",
											"    pm.expect(jsonData.birthdate).to.eql(\"1991-01-01T00:00:00.000Z\")\r",
											"    pm.expect(jsonData.gender).to.eql(\"Male\")\r",
											"    pm.expect(jsonData.first_name).to.eql(\"John\")\r",
											"    pm.expect(jsonData.last_name).to.eql(\"testL\")\r",
											"})  "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{site}}:{{port}}/users/{{user-id-1}}",
									"host": [
										"{{site}}"
									],
									"port": "{{port}}",
									"path": [
										"users",
										"{{user-id-1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get User By Criteria",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test(\"Response test\", function() {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"\r",
											"    // We should add a check that password is not included when the endpoint is changed to not send it back\r",
											"    var jsonData = pm.response.json()[0];\r",
											"    pm.expect(jsonData._id).to.eql(pm.environment.get(\"user-id-1\"));\r",
											"    pm.expect(jsonData.username).to.eql(pm.environment.get(\"username-1\"));\r",
											"    pm.expect(jsonData.email).to.eql(pm.environment.get(\"email-1\"));\r",
											"    pm.expect(jsonData.birthdate).to.eql(\"1991-01-01T00:00:00.000Z\")\r",
											"    pm.expect(jsonData.gender).to.eql(\"Male\")\r",
											"    pm.expect(jsonData.first_name).to.eql(\"John\")\r",
											"    pm.expect(jsonData.last_name).to.eql(\"testL\")\r",
											"})  "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{site}}:{{port}}/users?email={{email-1}}&username={{username-1}}",
									"host": [
										"{{site}}"
									],
									"port": "{{port}}",
									"path": [
										"users"
									],
									"query": [
										{
											"key": "email",
											"value": "{{email-1}}"
										},
										{
											"key": "username",
											"value": "{{username-1}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Login Tests",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test(\"Response test\", function() {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"\r",
											"    // We should add a check that password is not included when the endpoint is changed to not send it back\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Authentication successful!\");\r",
											"\r",
											"    postman.setEnvironmentVariable(\"user-1-jwt\", jsonData.token);\r",
											"})  "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "{{username-1}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "testpword",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{site}}:{{port}}/users/login",
									"host": [
										"{{site}}"
									],
									"port": "{{port}}",
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Profile Pic Tests",
					"item": [
						{
							"name": "Add Profile Pic",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test(\"Response test\", function() {\r",
											"    pm.response.to.be.withBody;\r",
											"\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"success\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "./test_assets/test-image.png"
										}
									]
								},
								"url": {
									"raw": "{{site}}:{{port}}/users/profile-pic/{{user-id-1}}",
									"host": [
										"{{site}}"
									],
									"port": "{{port}}",
									"path": [
										"users",
										"profile-pic",
										"{{user-id-1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Profile Pic",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test(\"Response test\", function() {\r",
											"    pm.response.to.be.withBody;\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{site}}:{{port}}/users/profile-pic/{{user-id-1}}",
									"host": [
										"{{site}}"
									],
									"port": "{{port}}",
									"path": [
										"users",
										"profile-pic",
										"{{user-id-1}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Friend Request Tests",
					"item": [
						{
							"name": "Make Friend Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"email\", _.random(1,1000000).toString() + \"@gmail.com\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test(\"Response test\", function() {\r",
											"    pm.response.to.be.withBody;\r",
											"    \r",
											"    postman.setEnvironmentVariable(\"username\", pm.response.text());\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"requesting_id\": \"{{user-id-2}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{site}}:{{port}}/users/add-friend/{{user-id-1}}",
									"host": [
										"{{site}}"
									],
									"port": "{{port}}",
									"path": [
										"users",
										"add-friend",
										"{{user-id-1}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Posts",
			"item": [
				{
					"name": "Create",
					"item": [
						{
							"name": "Add Post",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test(\"Response test\", function() {\r",
											"    pm.response.to.be.withBody;\r",
											"    \r",
											"    postman.setEnvironmentVariable(\"post-id\", pm.response.text());\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"titleeee\",\r\n    \"description\": \"im going on vacation\",\r\n    \"post_date\": \"1990-01-01\",\r\n    \"destinations\": [{\r\n        \"country\": \"USA\",\r\n        \"city\": \"Indy\",\r\n        \"region\": \"Indiana\"\r\n      }]\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{site}}:{{port}}/posts",
									"host": [
										"{{site}}"
									],
									"port": "{{port}}",
									"path": [
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Post By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test(\"Response test\", function() {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"\r",
											"    // We should add a check that password is not included when the endpoint is changed to not send it back\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData._id).to.eql(pm.environment.get(\"post-id\"));\r",
											"    pm.expect(jsonData.title).to.eql(\"titleeee\");\r",
											"    pm.expect(jsonData.description).to.eql(\"im going on vacation\");\r",
											"    pm.expect(jsonData.post_date).to.eql(\"1990-01-01T00:00:00.000Z\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{site}}:{{port}}/posts/{{post-id}}",
									"host": [
										"{{site}}"
									],
									"port": "{{port}}",
									"path": [
										"posts",
										"{{post-id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Trip_Photos",
			"item": [
				{
					"name": "Create",
					"item": [
						{
							"name": "Add Trip Photo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test(\"Response test\", function() {\r",
											"    pm.response.to.be.withBody;\r",
											"    \r",
											"    postman.setEnvironmentVariable(\"trip-photo-id\", pm.response.text());\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "./test_assets/test-image.png"
										},
										{
											"key": "author_id",
											"value": "{{user-id-1}}",
											"type": "text"
										},
										{
											"key": "trip_id",
											"value": "60445c76a3041c53e897352c",
											"type": "text"
										}
									],
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{site}}:{{port}}/trip_photos",
									"host": [
										"{{site}}"
									],
									"port": "{{port}}",
									"path": [
										"trip_photos"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Tests",
					"item": [
						{
							"name": "Get Trip Photo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{site}}:{{port}}/trip_photos/{{trip-photo-id}}",
									"host": [
										"{{site}}"
									],
									"port": "{{port}}",
									"path": [
										"trip_photos",
										"{{trip-photo-id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Messages",
			"item": [
				{
					"name": "Create",
					"item": [
						{
							"name": "Add Text Message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test(\"Response test\", function() {\r",
											"    pm.response.to.be.withBody;\r",
											"    \r",
											"    postman.setEnvironmentVariable(\"text-message-id\", pm.response.text());\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"message-board-id\", \"60495fd323e4d3826cba09cb\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "author_id",
											"value": "{{user-id-1}}",
											"type": "text"
										},
										{
											"key": "message_board_id",
											"value": "{{message-board-id}}",
											"type": "text"
										},
										{
											"key": "type",
											"value": "text",
											"type": "text"
										},
										{
											"key": "text",
											"value": "test string",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{site}}:{{port}}/messages",
									"host": [
										"{{site}}"
									],
									"port": "{{port}}",
									"path": [
										"messages"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Image Message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test(\"Response test\", function() {\r",
											"    pm.response.to.be.withBody;\r",
											"    \r",
											"    postman.setEnvironmentVariable(\"image-message-id\", pm.response.text());\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "./test_assets/test-image.png"
										},
										{
											"key": "author_id",
											"value": "{{user-id-1}}",
											"type": "text"
										},
										{
											"key": "message_board_id",
											"value": "{{message-board-id}}",
											"type": "text"
										},
										{
											"key": "type",
											"value": "image",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{site}}:{{port}}/messages",
									"host": [
										"{{site}}"
									],
									"port": "{{port}}",
									"path": [
										"messages"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Tests",
					"item": []
				},
				{
					"name": "Get Image Message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{site}}:{{port}}/messages/{{image-message-id}}",
							"host": [
								"{{site}}"
							],
							"port": "{{port}}",
							"path": [
								"messages",
								"{{image-message-id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Message_Boards",
			"item": [
				{
					"name": "Create",
					"item": [
						{
							"name": "Add Message Board",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status Test\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"Response Test\", function() {",
											"    pm.response.to.be.withBody;",
											"",
											"    postman.setEnvironmentVariable(\"message-board-id\", pm.response.text());",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user_ids\": [\"{{user-id-1}}\", \"{{user-id-2}}\"]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{site}}:{{port}}/message_boards",
									"host": [
										"{{site}}"
									],
									"port": "{{port}}",
									"path": [
										"message_boards"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Tests",
					"item": [
						{
							"name": "Get User's Message Boards",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status Test\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"Response Test\", function() {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"",
											"    // need to check that the data is formatted correctly, but idk how to do this dynamically",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]._id).to.eql(pm.environment.get(\"message-board-id\"));",
											"    pm.expect(jsonData[0].user_ids[0]).to.eql(pm.environment.get(\"user-id-1\"));",
											"    pm.expect(jsonData[0].user_ids[1]).to.eql(pm.environment.get(\"user-id-2\"));",
											"    pm.expect(jsonData[0].other_users[0].id).to.eql(pm.environment.get(\"user-id-2\"));",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{site}}:{{port}}/message_boards/all/{{user-id-1}}",
									"host": [
										"{{site}}"
									],
									"port": "{{port}}",
									"path": [
										"message_boards",
										"all",
										"{{user-id-1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get User's Message Boards JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status Test\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"Response Test\", function() {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"",
											"    // need to check that the data is formatted correctly, but idk how to do this dynamically",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]._id).to.eql(pm.environment.get(\"message-board-id\"));",
											"    pm.expect(jsonData[0].user_ids[0]).to.eql(pm.environment.get(\"user-id-1\"));",
											"    pm.expect(jsonData[0].user_ids[1]).to.eql(pm.environment.get(\"user-id-2\"));",
											"    pm.expect(jsonData[0].other_users[0].id).to.eql(pm.environment.get(\"user-id-2\"));",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{user-1-jwt}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{site}}:{{port}}/message_boards/",
									"host": [
										"{{site}}"
									],
									"port": "{{port}}",
									"path": [
										"message_boards",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Specific Message Board",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status Test\", function() {",
											"    pm.response.to.have.status(200)",
											"})",
											"",
											"pm.test(\"Response Test\", function() {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    // need to make extended tests for when all messages are included in response",
											"    pm.expect(jsonData._id).to.eql(pm.environment.get(\"message-board-id\"));",
											"    pm.expect(jsonData.user_ids[0]).to.eql(pm.environment.get(\"user-id-1\"));",
											"    pm.expect(jsonData.user_ids[1]).to.eql(pm.environment.get(\"user-id-2\"));",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{site}}:{{port}}/message_boards/{{message-board-id}}",
									"host": [
										"{{site}}"
									],
									"port": "{{port}}",
									"path": [
										"message_boards",
										"{{message-board-id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "site",
			"value": "localhost"
		},
		{
			"key": "port",
			"value": "3001"
		}
	]
}
